{
  "getUpdates": {
    "description": "Use this method to receive incoming updates using long polling (wiki). An Array of Update objects is returned.",
    "params": {
      "offset": {
        "type": "Integer",
        "required": false,
        "description": "Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an __offset__ higher than its __update_id__. The negative offset can be specified to retrieve updates starting from __-offset__ update from the end of the updates queue. All previous updates will forgotten."
      },
      "limit": {
        "type": "Integer",
        "required": false,
        "description": "Limits the number of updates to be retrieved. Values between 1—100 are accepted. Defaults to 100."
      },
      "timeout": {
        "type": "Integer",
        "required": false,
        "description": "Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only."
      },
      "allowed_updates": {
        "type": "Array of String",
        "required": false,
        "description": "List the types of updates you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.\nPlease note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time."
      }
    }
  },
  "setWebhook": {
    "description": "If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot‘s token, you can be pretty sure it’s us.",
    "params": {
      "url": {
        "type": "String",
        "required": true,
        "description": "HTTPS url to send updates to. Use an empty string to remove webhook integration"
      },
      "certificate": {
        "type": "InputFile",
        "required": false,
        "description": "Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details."
      },
      "max_connections": {
        "type": "Integer",
        "required": false,
        "description": "Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to __40__. Use lower values to limit the load on your bot‘s server, and higher values to increase your bot’s throughput."
      },
      "allowed_updates": {
        "type": "Array of String",
        "required": false,
        "description": "List the types of updates you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.\nPlease note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time."
      }
    }
  },
  "deleteWebhook": {
    "description": "Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns __True__ on success. Requires no parameters."
  },
  "getWebhookInfo": {
    "description": "Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the __url__ field empty."
  },
  "getMe": {
    "description": "A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object."
  },
  "sendMessage": {
    "description": "Use this method to send text messages. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
      },
      "text": {
        "type": "String",
        "required": true,
        "description": "Texto del mensaje a enviar"
      },
      "parse_mode": {
        "type": "String",
        "required": false,
        "description": "Send __Markdown__ or __HTML__, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message."
      },
      "disable_web_page_preview": {
        "type": "Boolean",
        "required": false,
        "description": "Disables link previews for links in this message"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "forwardMessage": {
    "description": "Use this method to forward messages of any kind. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
      },
      "from_chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "message_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador de mensaje en el chat especificado en __from_chat_id__"
      }
    }
  },
  "sendPhoto": {
    "description": "Use this method to send photos. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
      },
      "photo": {
        "type": "InputFile or String",
        "required": true,
        "description": "Foto para enviar. Pase un file_id como String para enviar una foto que existe en los servidores Telegram (recomendado), pase una URL HTTP como String para Telegram para obtener una foto de Internet o cargue una nueva foto usando multipart/form-data. Más información sobre Envío de archivos »"
      },
      "caption": {
        "type": "String",
        "required": false,
        "description": "Photo caption (may also be used when resending photos by __file_id__), 0-200 characters"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "sendAudio": {
    "description": "For sending voice messages, use the sendVoice method instead.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "audio": {
        "type": "InputFile or String",
        "required": true,
        "description": "Archivo de audio para enviar. Pase un file_id como String para enviar un archivo de audio que existe en los servidores Telegram (recomendado), pase una URL HTTP como String para Telegram para obtener un archivo de audio de Internet o cargue uno nuevo usando multipart/form-data. Más información sobre Envío de archivos »"
      },
      "caption": {
        "type": "String",
        "required": false,
        "description": "Audio caption, 0-200 characters"
      },
      "duration": {
        "type": "Integer",
        "required": false,
        "description": "Duration of the audio in seconds"
      },
      "performer": {
        "type": "String",
        "required": false,
        "description": "Performer"
      },
      "title": {
        "type": "String",
        "required": false,
        "description": "Track name"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "sendDocument": {
    "description": "Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "document": {
        "type": "InputFile or String",
        "required": true,
        "description": "Archivo para enviar. Pase un file_id como String para enviar un archivo que existe en los servidores Telegram (recomendado), pase una URL HTTP como String para Telegram para obtener un archivo desde Internet, o cargue una nueva usando multipart/form-data. Más información sobre Envío de archivos »"
      },
      "caption": {
        "type": "String",
        "required": false,
        "description": "Document caption (may also be used when resending documents by __file_id__), 0-200 characters"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "sendVideo": {
    "description": "Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
      },
      "video": {
        "type": "InputFile or String",
        "required": true,
        "description": "Video para enviar. Pase un file_id como String para enviar un video que existe en los servidores de Telegram (recomendado), pase una URL HTTP como String para Telegram para obtener un video de Internet o cargue un video nuevo usando multipart/form-data. Más información sobre Envío de archivos »"
      },
      "duration": {
        "type": "Integer",
        "required": false,
        "description": "Duration of sent video in seconds"
      },
      "width": {
        "type": "Integer",
        "required": false,
        "description": "Video width"
      },
      "height": {
        "type": "Integer",
        "required": false,
        "description": "Video height"
      },
      "caption": {
        "type": "String",
        "required": false,
        "description": "Video caption (may also be used when resending videos by __file_id__), 0-200 characters"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "sendVoice": {
    "description": "Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "voice": {
        "type": "InputFile or String",
        "required": true,
        "description": "Archivo de audio para enviar. Pase un file_id como String para enviar un archivo que existe en los servidores Telegram (recomendado), pase una URL HTTP como String para Telegram para obtener un archivo desde Internet, o cargue una nueva usando multipart/form-data. Más información sobre Envío de archivos »"
      },
      "caption": {
        "type": "String",
        "required": false,
        "description": "Voice message caption, 0-200 characters"
      },
      "duration": {
        "type": "Integer",
        "required": false,
        "description": "Duration of the voice message in seconds"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "sendVideoNote": {
    "description": "As of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "video_note": {
        "type": "InputFile or String",
        "required": true,
        "description": "Nota de video para enviar. Pase un file_id como String para enviar una nota de video que existe en los servidores Telegram (recomendado) o cargue un video nuevo usando multipart/form-data. Más información sobre Envío de archivos ». El envío de notas de vídeo por una URL no está soportado actualmente"
      },
      "duration": {
        "type": "Integer",
        "required": false,
        "description": "Duration of sent video in seconds"
      },
      "length": {
        "type": "Integer",
        "required": false,
        "description": "Video width and height"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "sendLocation": {
    "description": "Use this method to send point on the map. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "latitude": {
        "type": "Float number",
        "required": true,
        "description": "Latitud de la ubicación"
      },
      "longitude": {
        "type": "Float number",
        "required": true,
        "description": "Longitud de la ubicación"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "sendVenue": {
    "description": "Use this method to send information about a venue. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "latitude": {
        "type": "Float number",
        "required": true,
        "description": "Latitud del lugar"
      },
      "longitude": {
        "type": "Float number",
        "required": true,
        "description": "Longitud del lugar"
      },
      "title": {
        "type": "String",
        "required": true,
        "description": "Nombre del lugar"
      },
      "address": {
        "type": "String",
        "required": true,
        "description": "Dirección del lugar"
      },
      "foursquare_id": {
        "type": "String",
        "required": false,
        "description": "Foursquare identifier of the venue"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "sendContact": {
    "description": "Use this method to send phone contacts. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "phone_number": {
        "type": "String",
        "required": true,
        "description": "Número de teléfono del contacto"
      },
      "first_name": {
        "type": "String",
        "required": true,
        "description": "Nombre del contacto"
      },
      "last_name": {
        "type": "String",
        "required": false,
        "description": "Contact's last name"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove keyboard or to force a reply from the user."
      }
    }
  },
  "sendChatAction": {
    "description": "We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "action": {
        "type": "String",
        "required": true,
        "description": "Tipo de acción a difundir. Elija uno, dependiendo de lo que el usuario esté a punto de recibir: __typing__ para mensajes de texto, __upload_photo__ para fotos, __record_video__ o __upload_video__ para videos, __record_audio__ o __upload_audio__ para archivos de audio, __upload_document__ para archivos generales, __find_location__ para datos de ubicación, __record_video_note__ o __upload_video_note__ para video Notas."
      }
    }
  },
  "getUserProfilePhotos": {
    "description": "Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.",
    "params": {
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador único del usuario de destino"
      },
      "offset": {
        "type": "Integer",
        "required": false,
        "description": "Sequential number of the first photo to be returned. By default, all photos are returned."
      },
      "limit": {
        "type": "Integer",
        "required": false,
        "description": "Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100."
      }
    }
  },
  "getFile": {
    "description": "Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.",
    "params": {
      "file_id": {
        "type": "String",
        "required": true,
        "description": "Identificador de archivo para obtener información sobre"
      }
    }
  },
  "kickChatMember": {
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el grupo de destino o nombre de usuario del supergrupo o canal de destino (en el formato `@channelusername`)"
      },
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador único del usuario de destino"
      },
      "until_date": {
        "type": "Integer",
        "required": false,
        "description": "Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever"
      }
    }
  },
  "unbanChatMember": {
    "description": "Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns __True__ on success.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el grupo de destino o el nombre de usuario del supergrupo o canal de destino (en el formato «@nombredeusuario`)"
      },
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador único del usuario de destino"
      }
    }
  },
  "restrictChatMember": {
    "description": "Utilice este método para restringir un usuario en un supergrupo. El bot debe ser un administrador del supergrupo para que funcione y debe tener los derechos de administrador adecuados. Pase __True__ para todos los parámetros booleanos para levantar las restricciones de un usuario. Devuelve __True__ en caso de éxito.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o nombre de usuario del supergrupo de destino (en el formato `@supergroupusername`)"
      },
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador único del usuario de destino"
      },
      "until_date": {
        "type": "Integer",
        "required": false,
        "description": "Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever"
      },
      "can_send_messages": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the user can send text messages, contacts, locations and venues"
      },
      "can_send_media_messages": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the user can send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages"
      },
      "can_send_other_messages": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the user can send animations, games, stickers and use inline bots, implies can_send_media_messages"
      },
      "can_add_web_page_previews": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the user may add web page previews to their messages, implies can_send_media_messages"
      }
    }
  },
  "promoteChatMember": {
    "description": "Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass __False__ for all boolean parameters to demote a user. Returns __True__ on success.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador único del usuario de destino"
      },
      "can_change_info": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the administrator can change chat title, photo and other settings"
      },
      "can_post_messages": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the administrator can create channel posts, channels only"
      },
      "can_edit_messages": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the administrator can edit messages of other users, channels only"
      },
      "can_delete_messages": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the administrator can delete messages of other users"
      },
      "can_invite_users": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the administrator can invite new users to the chat"
      },
      "can_restrict_members": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the administrator can restrict, ban or unban chat members"
      },
      "can_pin_messages": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the administrator can pin messages, supergroups only"
      },
      "can_promote_members": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)"
      }
    }
  },
  "exportChatInviteLink": {
    "description": "Use this method to export an invite link to a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns exported invite link as __String__ on success.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      }
    }
  },
  "setChatPhoto": {
    "description": "Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "photo": {
        "type": "InputFile",
        "required": true,
        "description": "Nueva foto de chat, subida mediante multipart/form-data"
      }
    }
  },
  "deleteChatPhoto": {
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      }
    }
  },
  "setChatTitle": {
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "title": {
        "type": "String",
        "required": true,
        "description": "Nuevo título de chat, 1-255 caracteres"
      }
    }
  },
  "setChatDescription": {
    "description": "Utilice este método para cambiar la descripción de un supergrupo o un canal. El bot debe ser un administrador en el chat para que esto funcione y debe tener los derechos de administrador adecuados. Devuelve __True__ en caso de éxito. ",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "description": {
        "type": "String",
        "required": false,
        "description": "New chat description, 0-255 characters"
      }
    }
  },
  "pinChatMessage": {
    "description": "Use this method to pin a message in a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns __True__ on success. ",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o nombre de usuario del supergrupo de destino (en el formato `@supergroupusername`)"
      },
      "message_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador de un mensaje a pin"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Pass __True__, if it is not necessary to send a notification to all group members about the new pinned message"
      }
    }
  },
  "unpinChatMessage": {
    "description": "Use this method to unpin a message in a supergroup chat. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns __True__ on success. ",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o nombre de usuario del supergrupo de destino (en el formato `@supergroupusername`)"
      }
    }
  },
  "leaveChat": {
    "description": "Utilice este método para que su bot deje un grupo, supergrupo o canal. Devuelve __True__ en caso de éxito.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o nombre de usuario del supergrupo o canal de destino (en el formato `@channelusername`)"
      }
    }
  },
  "getChat": {
    "description": "Utilice este método para obtener información actualizada sobre el chat (nombre actual del usuario para las conversaciones uno a uno, nombre de usuario actual de un usuario, grupo o canal, etc.). Devuelve un objeto Chat en caso de éxito.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o nombre de usuario del supergrupo o canal de destino (en el formato `@channelusername`)"
      }
    }
  },
  "getChatAdministrators": {
    "description": "Utilice este método para obtener una lista de administradores en una conversación. En caso de éxito, devuelve una matriz de objetos ChatMember que contiene información sobre todos los administradores de chat excepto otros bots. Si el chat es un grupo o un supergrupo y no se nombraron administradores, solo se devolverá el creador.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o nombre de usuario del supergrupo o canal de destino (en el formato `@channelusername`)"
      }
    }
  },
  "getChatMembersCount": {
    "description": "Utilice este método para obtener el número de miembros en un chat. Devuelve __Int__ en caso de éxito.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o nombre de usuario del supergrupo o canal de destino (en el formato `@channelusername`)"
      }
    }
  },
  "getChatMember": {
    "description": "Utilice este método para obtener información sobre un miembro de un chat. Devuelve un objeto ChatMember en caso de éxito.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o nombre de usuario del supergrupo o canal de destino (en el formato `@channelusername`)"
      },
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador único del usuario de destino"
      }
    }
  },
  "answerCallbackQuery": {
    "params": {
      "callback_query_id": {
        "type": "String",
        "required": true,
        "description": "Identificador único para que la consulta sea respondida"
      },
      "text": {
        "type": "String",
        "required": false,
        "description": "Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters"
      },
      "show_alert": {
        "type": "Boolean",
        "required": false,
        "description": "If __true__, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to __false__."
      },
      "url": {
        "type": "String",
        "required": false,
        "description": "URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @Botfather, specify the URL that opens your game – note that this will only work if the query comes from a __callback_game__ button.\nOtherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter."
      },
      "cache_time": {
        "type": "Integer",
        "required": false,
        "description": "The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0."
      }
    }
  },
  "editMessageText": {
    "description": "Use this method to edit text and game messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise __True__ is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
      },
      "message_id": {
        "type": "Integer",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
      },
      "inline_message_id": {
        "type": "String",
        "required": false,
        "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
      },
      "text": {
        "type": "String",
        "required": true,
        "description": "Nuevo texto del mensaje"
      },
      "parse_mode": {
        "type": "String",
        "required": false,
        "description": "Send __Markdown__ or __HTML__, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message."
      },
      "disable_web_page_preview": {
        "type": "Boolean",
        "required": false,
        "description": "Disables link previews for links in this message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup",
        "required": false,
        "description": "A JSON-serialized object for an inline keyboard."
      }
    }
  },
  "editMessageCaption": {
    "description": "Use this method to edit captions of messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise __True__ is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
      },
      "message_id": {
        "type": "Integer",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
      },
      "inline_message_id": {
        "type": "String",
        "required": false,
        "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
      },
      "caption": {
        "type": "String",
        "required": false,
        "description": "New caption of the message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup",
        "required": false,
        "description": "A JSON-serialized object for an inline keyboard."
      }
    }
  },
  "editMessageReplyMarkup": {
    "description": "Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).  On success, if edited message is sent by the bot, the edited Message is returned, otherwise __True__ is returned.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
      },
      "message_id": {
        "type": "Integer",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
      },
      "inline_message_id": {
        "type": "String",
        "required": false,
        "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup",
        "required": false,
        "description": "A JSON-serialized object for an inline keyboard."
      }
    }
  },
  "deleteMessage": {
    "description": "Utilice este método para eliminar un mensaje, incluidos los mensajes de servicio, con las siguientes limitaciones:\n- Un mensaje sólo se puede eliminar si se envió hace menos de 48 horas.\n- Los bots pueden eliminar mensajes salientes en grupos y supergrupos.\n- Bots concedidos __can_post_messages__ permisos pueden borrar mensajes salientes en canales.\n- Si el bot es un administrador de un grupo, puede borrar cualquier mensaje allí.\n- Si el bot tiene permiso __can_delete_messages__ en un supergrupo o un canal, Puede borrar cualquier mensaje allí.\nReturns __True__ en caso de éxito.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "message_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador del mensaje a eliminar"
      }
    }
  },
  "sendSticker": {
    "description": "Utilice este método para enviar pegatinas .webp. En caso de éxito, se devuelve el mensaje enviado.",
    "params": {
      "chat_id": {
        "type": "Integer or String",
        "required": true,
        "description": "Identificador único para el chat de destino o el nombre de usuario del canal de destino (en el formato `@channelusername`)"
      },
      "sticker": {
        "type": "InputFile or String",
        "required": true,
        "description": "Sticker para enviar. Pase un file_id como String para enviar un archivo que existe en los servidores de Telegram (recomendado), pase una URL HTTP como String para Telegram para obtener un archivo .webp desde Internet o cargue uno nuevo usando multipart / form-data. Más información sobre Envío de archivos »"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
        "required": false,
        "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
      }
    }
  },
  "getStickerSet": {
    "description": "Use this method to get a sticker set. On success, a StickerSet object is returned.",
    "params": {
      "name": {
        "type": "String",
        "required": true,
        "description": "Nombre del conjunto de stickers"
      }
    }
  },
  "uploadStickerFile": {
    "description": "Utilice este método para cargar un archivo .png de un sticker para su uso posterior en los métodos __createNewStickerSet__ y __addStickerToSet__ (puede utilizarse varias veces). Devuelve el archivo cargado en caso de éxito.",
    "params": {
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "Identificador de usuario propietario del archivo sticker"
      },
      "png_sticker": {
        "type": "InputFile",
        "required": true,
        "description": "**Png** Imagen con la etiqueta, debe tener un tamaño de hasta 512 kilobytes, las dimensiones no deben exceder 512px, y el ancho o la altura deben ser exactamente 512px. Más información sobre Envío de archivos »"
      }
    }
  },
  "createNewStickerSet": {
    "description": "Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. Returns __True__ on success.",
    "params": {
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "User identifier of created sticker set owner"
      },
      "name": {
        "type": "String",
        "required": true,
        "description": "Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., __animals__). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in __“_by_<bot username>”__. __<bot_username>__ is case insensitive. 1-64 characters."
      },
      "title": {
        "type": "String",
        "required": true,
        "description": "Sticker set title, 1-64 characters"
      },
      "png_sticker": {
        "type": "InputFile or String",
        "required": true,
        "description": "**Png** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a __file_id__ as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »"
      },
      "emojis": {
        "type": "String",
        "required": true,
        "description": "One or more emoji corresponding to the sticker"
      },
      "contains_masks": {
        "type": "Boolean",
        "required": false,
        "description": "Pass __True__, if a set of mask stickers should be created"
      },
      "mask_position": {
        "type": "MaskPosition",
        "required": false,
        "description": "A JSON-serialized object for position where the mask should be placed on faces"
      }
    }
  },
  "addStickerToSet": {
    "description": "Use this method to add a new sticker to a set created by the bot. Returns __True__ on success.",
    "params": {
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "User identifier of sticker set owner"
      },
      "name": {
        "type": "String",
        "required": true,
        "description": "Sticker set name"
      },
      "png_sticker": {
        "type": "InputFile or String",
        "required": true,
        "description": "**Png** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a __file_id__ as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »"
      },
      "emojis": {
        "type": "String",
        "required": true,
        "description": "One or more emoji corresponding to the sticker"
      },
      "mask_position": {
        "type": "MaskPosition",
        "required": false,
        "description": "A JSON-serialized object for position where the mask should be placed on faces"
      }
    }
  },
  "setStickerPositionInSet": {
    "description": "Use this method to move a sticker in a set created by the bot to a specific position . Returns __True__ on success.",
    "params": {
      "sticker": {
        "type": "String",
        "required": true,
        "description": "File identifier of the sticker"
      },
      "position": {
        "type": "Integer",
        "required": true,
        "description": "New sticker position in the set, zero-based"
      }
    }
  },
  "deleteStickerFromSet": {
    "description": "Use this method to delete a sticker from a set created by the bot. Returns __True__ on success.",
    "params": {
      "sticker": {
        "type": "String",
        "required": true,
        "description": "File identifier of the sticker"
      }
    }
  },
  "answerInlineQuery": {
    "description": "Use this method to send answers to an inline query. On success, __True__ is returned.\nNo more than **50** results per query are allowed.",
    "params": {
      "inline_query_id": {
        "type": "String",
        "required": true,
        "description": "Unique identifier for the answered query"
      },
      "results": {
        "type": "Array of InlineQueryResult",
        "required": true,
        "description": "A JSON-serialized array of results for the inline query"
      },
      "cache_time": {
        "type": "Integer",
        "required": false,
        "description": "The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300."
      },
      "is_personal": {
        "type": "Boolean",
        "required": false,
        "description": "Pass __True__, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query"
      },
      "next_offset": {
        "type": "String",
        "required": false,
        "description": "Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes."
      },
      "switch_pm_text": {
        "type": "String",
        "required": false,
        "description": "If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter __switch_pm_parameter__"
      },
      "switch_pm_parameter": {
        "type": "String",
        "required": false,
        "description": "Deep-linking parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.\n__Example:__ An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a ‘Connect your YouTube account’ button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a __switch_inline__ button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities."
      }
    }
  },
  "sendInvoice": {
    "description": "Use this method to send invoices. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer",
        "required": true,
        "description": "Unique identifier for the target private chat"
      },
      "title": {
        "type": "String",
        "required": true,
        "description": "Product name, 1-32 characters"
      },
      "description": {
        "type": "String",
        "required": true,
        "description": "Product description, 1-255 characters"
      },
      "payload": {
        "type": "String",
        "required": true,
        "description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes."
      },
      "provider_token": {
        "type": "String",
        "required": true,
        "description": "Payments provider token, obtained via Botfather"
      },
      "start_parameter": {
        "type": "String",
        "required": true,
        "description": "Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter"
      },
      "currency": {
        "type": "String",
        "required": true,
        "description": "Three-letter ISO 4217 currency code, see more on currencies"
      },
      "prices": {
        "type": "Array of LabeledPrice",
        "required": true,
        "description": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)"
      },
      "photo_url": {
        "type": "String",
        "required": false,
        "description": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for."
      },
      "photo_size": {
        "type": "Integer",
        "required": false,
        "description": "Photo size"
      },
      "photo_width": {
        "type": "Integer",
        "required": false,
        "description": "Photo width"
      },
      "photo_height": {
        "type": "Integer",
        "required": false,
        "description": "Photo height"
      },
      "need_name": {
        "type": "Boolean",
        "required": false,
        "description": "Pass __True__, if you require the user's full name to complete the order"
      },
      "need_phone_number": {
        "type": "Boolean",
        "required": false,
        "description": "Pass __True__, if you require the user's phone number to complete the order"
      },
      "need_email": {
        "type": "Boolean",
        "required": false,
        "description": "Pass __True__, if you require the user's email to complete the order"
      },
      "need_shipping_address": {
        "type": "Boolean",
        "required": false,
        "description": "Pass __True__, if you require the user's shipping address to complete the order"
      },
      "is_flexible": {
        "type": "Boolean",
        "required": false,
        "description": "Pass __True__, if the final price depends on the shipping method"
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup",
        "required": false,
        "description": "A JSON-serialized object for an inline keyboard. If empty, one 'Pay `total price`' button will be shown. If not empty, the first button must be a Pay button."
      }
    }
  },
  "answerShippingQuery": {
    "description": "If you sent an invoice requesting a shipping address and the parameter __is_flexible__ was specified, the Bot API will send an Update with a __shipping_query__ field to the bot. Use this method to reply to shipping queries. On success, True is returned.",
    "params": {
      "shipping_query_id": {
        "type": "String",
        "required": true,
        "description": "Unique identifier for the query to be answered"
      },
      "ok": {
        "type": "Boolean",
        "required": true,
        "description": "Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)"
      },
      "shipping_options": {
        "type": "Array of ShippingOption",
        "required": false,
        "description": "Required if __ok__ is True. A JSON-serialized array of available shipping options."
      },
      "error_message": {
        "type": "String",
        "required": false,
        "description": "Required if __ok__ is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user."
      }
    }
  },
  "answerPreCheckoutQuery": {
    "description": "Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field __pre_checkout_query__. Use this method to respond to such pre-checkout queries. On success, True is returned. ",
    "params": {
      "pre_checkout_query_id": {
        "type": "String",
        "required": true,
        "description": "Unique identifier for the query to be answered"
      },
      "ok": {
        "type": "Boolean",
        "required": true,
        "description": "Specify __True__ if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use __False__ if there are any problems."
      },
      "error_message": {
        "type": "String",
        "required": false,
        "description": "Required if __ok__ is __False__. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user."
      }
    }
  },
  "sendGame": {
    "description": "Use this method to send a game. On success, the sent Message is returned.",
    "params": {
      "chat_id": {
        "type": "Integer",
        "required": true,
        "description": "Unique identifier for the target chat"
      },
      "game_short_name": {
        "type": "String",
        "required": true,
        "description": "Short name of the game, serves as the unique identifier for the game. Set up your games via Botfather."
      },
      "disable_notification": {
        "type": "Boolean",
        "required": false,
        "description": "Sends the message silently. Users will receive a notification with no sound."
      },
      "reply_to_message_id": {
        "type": "Integer",
        "required": false,
        "description": "If the message is a reply, ID of the original message"
      },
      "reply_markup": {
        "type": "InlineKeyboardMarkup",
        "required": false,
        "description": "A JSON-serialized object for an inline keyboard. If empty, one ‘Play game_title’ button will be shown. If not empty, the first button must launch the game."
      }
    }
  },
  "setGameScore": {
    "description": "Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns __True__. Returns an error, if the new score is not greater than the user's current score in the chat and __force__ is __False__.",
    "params": {
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "User identifier"
      },
      "score": {
        "type": "Integer",
        "required": true,
        "description": "New score, must be non-negative"
      },
      "force": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters"
      },
      "disable_edit_message": {
        "type": "Boolean",
        "required": false,
        "description": "Pass True, if the game message should not be automatically edited to include the current scoreboard"
      },
      "chat_id": {
        "type": "Integer",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat"
      },
      "message_id": {
        "type": "Integer",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
      },
      "inline_message_id": {
        "type": "String",
        "required": false,
        "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
      }
    }
  },
  "getGameHighScores": {
    "description": "Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects.",
    "params": {
      "user_id": {
        "type": "Integer",
        "required": true,
        "description": "Target user id"
      },
      "chat_id": {
        "type": "Integer",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat"
      },
      "message_id": {
        "type": "Integer",
        "required": false,
        "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
      },
      "inline_message_id": {
        "type": "String",
        "required": false,
        "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
      }
    }
  }
}
